/**
@mainpage Linear Allocator Documentation

@section intro Introduction

This is a Data-Oriented Programming implementation of a linear/arena allocator with precise alignment control, based on the design described in "Memory Allocation Strategies - Part 2" by Ginger Bill. The allocator follows strict DOP principles with public data members, struct methods, and no getters/setters.

@section overview Overview

This implementation provides a comprehensive linear allocator following data-oriented programming principles. The allocator supports:

- Precise memory alignment for any data type
- Efficient O(1) allocation time
- Temporary memory savepoints for short-lived allocations
- Resize functionality for the last allocation
- Using custom user-provided memory buffers
- Memory zeroing control
- Reset operation for reusing memory
- Error handling via `std::expected` (C++23)
- Passing by reference to functions that need to allocate memory

@section design Design Principles

The `LinearAllocator` adheres to data-oriented design:
- Public data members (no getters/setters)
- Methods defined inline within the struct declaration
- No private encapsulation
- Separation of data and behavior where appropriate
- Simplified memory management (user manages freeing)

@section usage Basic Usage

@subsection creation Creating an Allocator

```cpp
// Create a 1KB allocator
auto allocator_result = alloc::LinearAllocator::create(1024);
if (!allocator_result) {
    // Handle error
    return;
}

auto& allocator = allocator_result.value();

// Or create from an existing buffer
uint8_t buffer[512];
auto buffer_allocator_result = alloc::LinearAllocator::create_from_buffer(buffer, sizeof(buffer));
auto& buffer_allocator = buffer_allocator_result.value();
```

@subsection allocation Allocating Memory

```cpp
// Allocate memory for an integer
auto int_result = allocator.allocate<int>();
if (int_result) {
    int* value = int_result.value();
    *value = 42;
}

// Allocate an array with specific alignment
auto array_result = allocator.allocate<float>(10, 16); // 16-byte alignment
if (array_result) {
    float* array = array_result.value();
    // Use array...
}
```

@subsection resize Resizing Memory

```cpp
// Allocate initial memory
auto points_result = allocator.allocate<Point>(3);
Point* points = points_result.value();
// Initialize points...

// Resize the allocation
auto resized_points = allocator.resize<Point>(points, 3, 5);
Point* more_points = resized_points.value();
// Initialize the new points...
```

@subsection temp Temporary Memory Savepoints

```cpp
// Create a temporary memory savepoint
{
    auto temp = alloc::TempArenaMemory::begin(allocator);

    // Allocate temporary memory
    auto temp_result = allocator.allocate<float>(100);
    float* temp_data = temp_result.value();
    // Use temporary data...

    // Explicitly end temporary memory (optional)
    temp.end();
    // Or let it automatically end when it goes out of scope
}
```

@subsection func Passing to Functions

```cpp
std::expected<Point*, alloc::AllocError> create_points(alloc::LinearAllocator& alloc) {
    auto points_result = alloc.allocate<Point>(3);
    if (!points_result) {
        return std::unexpected(points_result.error());
    }

    Point* points = points_result.value();
    // Initialize points...
    return points;
}

// Call the function
auto points = create_points(allocator);
```

@subsection reset Memory Management

```cpp
// Reset the allocator (keeps the memory but resets usage counter)
allocator.reset();

// Remember to manually free the memory when done
std::free(allocator.buffer);
```

@section errors Error Handling

The allocator uses `std::expected` for error handling:

```cpp
auto result = allocator.allocate<int>();
if (!result) {
    switch (result.error()) {
        case alloc::AllocError::OutOfMemory:
            // Handle out of memory
            break;
        case alloc::AllocError::InvalidAlignment:
            // Handle invalid alignment
            break;
    }
}
```

@section integration Integration with Other Projects

See the @ref library_usage page for detailed instructions on how to integrate this allocator into your own projects.
*/
